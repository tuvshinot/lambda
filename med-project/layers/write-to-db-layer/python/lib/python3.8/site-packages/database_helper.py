""" Database common operations """


def table_exists(conn, db_name, table_name):
    """ Checks if table exists in db provided
        Args: conn(DB connection), db_name, table_name
        Returns: Bool
    """
    sql = 'SELECT table_name FROM information_schema.tables WHERE table_schema=%s AND table_name=%s;'
    with conn.cursor() as cursor:
        result = cursor.execute(sql, (db_name, table_name))
        return True if result else False


def create_film_array_tables(conn):
    """ Creates film_array tables
        Args: conn(DB connection)
        Return: None
    """
    # SQL query for creating 3 tables for film array machine result
    sql_film_array = """CREATE TABLE IF NOT EXISTS result_machine_film_array (
                 test_id int NOT NULL AUTO_INCREMENT,specimen_identifier varchar(150),
                 test_identifier varchar(150),test_name varchar(150), test_version varchar(30),
                 test_instrument_type varchar(80),test_instrument_serial_number varchar(80),
                 disposable_identifier varchar(80),disposable_reference varchar(80),
                 disposable_type varchar(70),disposable_lot_number varchar(70),
                 header_info_sender_name varchar(50),header_info_processing_identifier varchar(30),
                 header_info_version varchar(30),header_info_date_time varchar(75),
                 header_info_message_type varchar(30),request_status varchar(20),PRIMARY KEY (test_id));"""

    sql_result_group = """CREATE TABLE IF NOT EXISTS result_machine_film_array_group (
                 result_group_id int NOT NULL AUTO_INCREMENT,result_group_code varchar(100),
                 result_group_name varchar(100),result_group_coding_system varchar(100),
                 test_id int, PRIMARY KEY (result_group_id), 
                 FOREIGN KEY (test_id) REFERENCES result_machine_film_array(test_id));"""

    sql_result = """CREATE TABLE IF NOT EXISTS result_machine_film_array_group_item (
                 result_id int NOT NULL AUTO_INCREMENT, result_test_code varchar(100),
                 result_test_name varchar(100), result_coding_system varchar(100), value_type varchar(100),
                 observation_value varchar(100), observation_name varchar(100), operator_name varchar(100),
                 result_date_time varchar(100), result_group_id int, PRIMARY KEY (result_id),
                 FOREIGN KEY (result_group_id) REFERENCES result_machine_film_array_group(result_group_id));"""

    with conn.cursor() as cursor:
        cursor.execute(sql_film_array)
        cursor.execute(sql_result_group)
        cursor.execute(sql_result)
        conn.commit()


def create_sciex_table(conn):
    """ Creates sciex table
        Args: conn(DB connection)
        Return: None
    """
    # SQL query for creating sciex table
    sql = """CREATE TABLE result_machine_sciex (
             id int NOT NULL AUTO_INCREMENT,sample_name varchar(200),component_name varchar(150),
             actual_concentration varchar(150),calculated_concentration varchar(30),PRIMARY KEY (id));"""

    with conn.cursor() as cursor:
        cursor.execute(sql)
        conn.commit()


def create_olympus_table(conn):
    """ Creates olympus table
        Args: conn(DB connection)
        Return: None
    """
    sql = """CREATE TABLE IF NOT EXISTS result_machine_olympus (
                 id int NOT NULL AUTO_INCREMENT,accession_number varchar(100),specimen_type varchar(25),
                 patient_name varchar(200),amphetamine varchar(100),barbiturates varchar(100),
                 benzodiazepine varchar(100),cocaine varchar(100),methadone varchar(100),
                 opiates varchar(100),oxycodone varchar(100),phencyclidine_pcp varchar(100),
                 thc_cooh varchar(100),ecstacy_mdma varchar(100),PRIMARY KEY (id));"""

    with conn.cursor() as cursor:
        cursor.execute(sql)
        conn.commit()
